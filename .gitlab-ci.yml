stages:
  - validate
  - compile
  - test
  - deploy
  - integration

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN"
  NPM_CONFIG_CACHE: "$CI_PROJECT_DIR/.npm"
  BACKEND_DIR: "backend/Gallery"
  FRONTEND_DIR: "Frontend/DAT251-frontend"
  # Global cache settings
  GLOBAL_CACHE_KEY: "gallery-project-cache"
  CACHE_CLEANUP_AGE: "7 days"
  JAVA_DOCKER_IMAGE: "maven:3.9.6-eclipse-temurin-21"

## Backend Jobs
java:compile:
  image: ${JAVA_DOCKER_IMAGE}
  stage: compile
  before_script:
    - echo "Compiling Java backend with Maven and JDK 21"
    - cd ${BACKEND_DIR}
    - java -version
  script:
    - mvn compile -T 1C
    - echo "Java compilation completed successfully"
  tags:
    - docker
  cache:
    key: ${GLOBAL_CACHE_KEY}
    paths:
      - .m2/repository/
    policy: pull-push
    when: on_success

java:test:unit:
  image: ${JAVA_DOCKER_IMAGE}
  stage: test
  needs: ["java:compile"]
  before_script:
    - echo "Running Java unit tests"
    - cd ${BACKEND_DIR}
  script:
    - mvn test -T 1C
    - echo "Java unit tests completed"
  after_script:
    - cd ${BACKEND_DIR}
    - find . -name "TEST-*.xml" -type f -exec cp {} $CI_PROJECT_DIR/ \;
  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/TEST-*.xml
    paths:
      - ${BACKEND_DIR}/target/surefire-reports/
      - ${BACKEND_DIR}/target/pit-reports/
    expire_in: 1 week
  tags:
    - docker
  cache:
    key: ${GLOBAL_CACHE_KEY}
    paths:
      - .m2/repository/
    policy: pull

# Updated job to use Kaniko for Docker builds
java:package:docker:
  image: gcr.io/kaniko-project/executor:v1.19.2-debug
  stage: deploy
  needs: ["java:test:unit"]
  variables:
    BACKEND_IMAGE: ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_SHORT_SHA}
  before_script:
    - echo "Building Docker image for backend with Kaniko"
    - mkdir -p /kaniko/.docker
    # Create Docker config with GitLab registry credentials
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
  script:
    - cd ${BACKEND_DIR}
    - >-
      /kaniko/executor
      --context="${CI_PROJECT_DIR}/${BACKEND_DIR}"
      --dockerfile="${CI_PROJECT_DIR}/${BACKEND_DIR}/Dockerfile"
      --destination="${BACKEND_IMAGE}"
      --cache=true
      --cache-ttl=24h
    - echo "Docker image built and pushed to ${BACKEND_IMAGE}"
  tags:
    - docker

## Frontend Jobs
js:dependency:check:
  image: node:20
  stage: validate
  before_script:
    - echo "Validating frontend dependencies"
    - cd ${FRONTEND_DIR}
    - node --version
    - npm --version
    # Clean up any pnpm lock file and generate a clean package-lock.json
    - rm -f pnpm-lock.yaml
    - npm install
  script:
    - npm audit || echo "Audit warnings found, but continuing"
    - echo "Frontend dependency validation complete"
  tags:
    - docker
  cache:
    key: ${GLOBAL_CACHE_KEY}
    paths:
      - .npm/
      - ${FRONTEND_DIR}/node_modules/
    policy: pull-push
    when: on_success

js:build:assets:
  image: node:20
  stage: compile
  needs: ["js:dependency:check"]
  before_script:
    - echo "Building frontend assets"
    - cd ${FRONTEND_DIR}
  script:
    - npm ci
    - npm run build
    - echo "Frontend assets built successfully"
  artifacts:
    name: "frontend-dist-$CI_COMMIT_SHORT_SHA"
    paths:
      - ${FRONTEND_DIR}/dist/
    expire_in: 2 weeks
  tags:
    - docker
  cache:
    key: ${GLOBAL_CACHE_KEY}
    paths:
      - .npm/
      - ${FRONTEND_DIR}/node_modules/
    policy: pull

js:test:e2e:
  image: cypress/browsers:22.14.0
  stage: integration
  needs: ["js:build:assets","java:package:docker"]
  services:
    - name: ${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_SHORT_SHA}
      alias: backend
  variables:
    NODE_OPTIONS: "--max-old-space-size=4096"
    CYPRESS_BACKEND_URL: "http://backend:8080"
  before_script:
    - echo "Installing Cypress and dependencies"
    - cd ${FRONTEND_DIR}
    - npm ci
    - npx cypress verify
    - npm install cypress@14.2.1 --save-dev
    # Build the app first (if not already done by previous stage)
    - npm run build
    # Use vite preview instead of dev server
    - npm run preview -- --port 5173 --host &
    - echo "Waiting for preview server to start"
    - sleep 15
  script:
    - echo "Running Cypress tests against preview server with backend service"
    - npx cypress run --config baseUrl=http://localhost:5173,env.backendUrl=http://backend:8080
    - echo "End-to-end tests completed"
  after_script:
    - echo "Collecting test artifacts"
    - mkdir -p $CI_PROJECT_DIR/cypress-results
    - mkdir -p ${FRONTEND_DIR}/cypress/screenshots || true
    - mkdir -p ${FRONTEND_DIR}/cypress/videos || true
    - cp -r ${FRONTEND_DIR}/cypress/screenshots $CI_PROJECT_DIR/cypress-results/ || true
    - cp -r ${FRONTEND_DIR}/cypress/videos $CI_PROJECT_DIR/cypress-results/ || true
    # Kill the background preview server
    - pkill -f "npm run preview" || true
  artifacts:
    name: "e2e-test-results-$CI_COMMIT_SHORT_SHA"
    when: always
    paths:
      - cypress-results/
    expire_in: 2 weeks
  tags:
    - docker
  cache:
    key: ${GLOBAL_CACHE_KEY}
    paths:
      - .npm/
      - ${FRONTEND_DIR}/node_modules/
    policy: pull

# Add a manual cache cleanup job
cache:cleanup:
  stage: validate
  image: alpine:latest
  script:
    - echo "Cleaning up old cache files older than ${CACHE_CLEANUP_AGE}"
    - find .npm -type f -mtime +7 -delete || true
    - find .m2 -type f -mtime +7 -delete || true
    - echo "Cache cleanup completed"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" || $FORCE_CLEANUP == "true"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web" && $MANUAL_CLEANUP == "true"'
      when: manual
  allow_failure: true
  tags:
    - docker
